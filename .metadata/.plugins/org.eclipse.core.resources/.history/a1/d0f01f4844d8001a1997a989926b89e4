/* Programa que realiza a leitura dos dados de uma reserva de hotel (número do quarto, data
de entrada e data de saída) e mostrar os dados da reserva, inclusive sua duração em
dias. Em seguida, ler novas datas de entrada e saída, atualizar a reserva, e mostrar
novamente a reserva com os dados atualizados. O programa não deve aceitar dados
inválidos para a reserva, conforme as seguintes regras:
- Alterações de reserva só podem ocorrer para datas futuras
- A data de saída deve ser maior que a data de entrada.

SOLUCAO 1: (muito ruim): logica de validacao no programa principal
• Logica de validacao nao delegada a reserva
SOLUCAO 2 (ruim): método retornando string
• A semAntica da operacao e prejudicada
• Retornar string nao tem nada a ver com atualização de reserva
• E se a operação tivesse que retornar um string?
• Ainda nao e possivel tratar excecoes em construtores
• Ainda nao ha auxilio do compilador: o programador deve "lembrar" de verificar se houve
erro
• A logica fica estruturada em condicionais aninhadas
SOLUCAO 3 (boa): tratamento de excecoes.Excecao foi tratada e nao propagada com o throws ParseException.
*
*/

package application;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

import model.entities.Reservation;
import model.exceptions.DomainException;

public class Program {

	public static void main(String[] args)  {
		Scanner sc = new Scanner(System.in);
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

		System.out.print("Room number: ");
//		int number = sc.nextInt();
//		System.out.print("Check-in date (dd/MM/yyyy): ");
//		Date checkIn = sdf.parse(sc.next());
//		System.out.print("Check-out date (dd/MM/yyyy): ");
//		Date checkOut = sdf.parse(sc.next());

//		SOLUCAO3 
		try {
			System.out.print("Room number: ");
			int number = sc.nextInt();
			System.out.print("Check-in date (dd/MM/yyyy): ");
			Date checkIn = sdf.parse(sc.next());
			System.out.print("Check-out date (dd/MM/yyyy): ");
			Date checkOut = sdf.parse(sc.next());
			
			Reservation reservation = new Reservation(number, checkIn, checkOut);
			System.out.println("Reservation: " + reservation);
			
			System.out.println();
			System.out.println("Enter data to update the reservation:");
			System.out.print("Check-in date (dd/MM/yyyy): ");
			checkIn = sdf.parse(sc.next());
			System.out.print("Check-out date (dd/MM/yyyy): ");
			checkOut = sdf.parse(sc.next());
			
			reservation.updateDates(checkIn, checkOut);
			System.out.println("Reservation: " + reservation);
		}
		catch(ParseException e) {
			System.out.println("Invalid date format.");
			
		}
		
		catch(DomainException e) {
//			getMessage=mensagem passada na excecao do reservation
			System.out.println("Error in reservation: "+e.getMessage());
		}
		
		catch (RuntimeException e) {
			System.out.println("Unexpected error");
		}

		

		sc.close();
	}

}
